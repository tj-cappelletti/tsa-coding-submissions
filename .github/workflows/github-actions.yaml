name: build-application-workflow

# Build on every push (regardless of branch)
# Build on PR to ensure the merge is good
# Allow manual builds
on: [push, pull_request, workflow_dispatch]

env:
  DOCKER_REPO: webstorm.azurecr.io

jobs:
  semver:
    name: "Generate SemVer"
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}
      patch: ${{ steps.gitversion.outputs.patch }}
      majorMinor: ${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}
      releaseLabel: ${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}.${{ steps.gitversion.outputs.patch }}${{ steps.gitversion.outputs.prereleaselabelwithdash }}
      majorMinorReleaseLabel: ${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}${{ steps.gitversion.outputs.prereleaselabelwithdash }}
      majorReleaseLabel: ${{ steps.gitversion.outputs.major }}${{ steps.gitversion.outputs.prereleaselabelwithdash }}
      semVer: ${{ steps.gitversion.outputs.semver }}
      shorSha: ${{ steps.gitversion.outputs.shortSha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
        
      - name: GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
    
  buildApplciations:
    name: "Build .NET Applciations"
    needs: semver
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301

      - name: Download SQL Server Tools
        shell: pwsh
        run: |
          $tarballFile = "Microsoft.SqlTools.ServiceLayer-rhel-x64-netcoreapp3.1.tar.gz"

          $latestReleaseUrl = "https://api.github.com/repos/microsoft/sqltoolsservice/releases/latest"
          $latestRelease = Invoke-RestMethod -Uri $latestReleaseUrl -Method Get
          $latestReleaseAssets = Invoke-RestMethod -Uri $latestRelease.assets_url -Method Get

          $downloadUrl = $latestReleaseAssets | Where-Object { $_.name -eq $tarballFile } | Select-Object -ExpandProperty browser_download_url

          New-Item -Path ${{ runner.temp }}/sql-tools -ItemType Directory
          
          Invoke-WebRequest -Uri $downloadUrl -OutFile ${{ runner.temp }}/sql-tools/sql-tools.tar.gz

      - name: Extract SQL Server Tools
        run: tar -xvzf ${{ runner.temp }}/sql-tools/sql-tools.tar.gz

      - name: Restore Projects
        working-directory: ./src
        run: dotnet restore ./Tsa.CodingChallenge.Submissions.sln /p:Version=${{ needs.semver.outputs.semVer }}

      - name: Build Projects
        working-directory: ./src
        #run: dotnet build ./Tsa.CodingChallenge.Submissions.WebApi/Tsa.CodingChallenge.Submissions.WebApi.csproj --configuration Release --no-restore --nologo
        run: dotnet build ./Tsa.CodingChallenge.Submissions.sln --configuration Release /p:NetCoreBuild=true /p:NETCoreTargetsPath="C:\Users\tcappelletti\.azuredatastudio\extensions\microsoft.sql-database-projects-0.5.1\BuildDirectory"

      - name: Build Blazor Project
        working-directory: ./src
        #run: dotnet build ./Tsa.CodingChallenge.Submissions.Blazor/Tsa.CodingChallenge.Submissions.Blazor.csproj --configuration Release --no-restore --nologo
        run: |
          dotnet build .\src\Tsa.CodingChallenge.Submissions.sln \
            --configuration Release \
            --no-restore \
            --nologo \
            /p:NetCoreBuild=true \
            /p:NETCoreTargetsPath=${{ runner.temp }}/sql-tools
        
      - name: Run Unit Tests
        working-directory: ./src
        run: dotnet test ./Tsa.CodingChallenge.Submissions.UnitTests/Tsa.CodingChallenge.Submissions.UnitTests.csproj --no-restore --verbosity normal --filter "TestCategory=UnitTest" --nologo

      - name: Publish Blazor App
        working-directory: ./src
        run: |
          dotnet publish ./Tsa.CodingChallenge.Submissions.Blazor/Tsa.CodingChallenge.Submissions.Blazor.csproj \
            --configuration Release \
            --no-build \
            --output ${{ runner.temp }}/Tsa.CodingChallenge.Submissions.Blazor \
            --nologo

      - name: Publish Web AIP
        working-directory: ./src
        run: |
          dotnet publish ./Tsa.CodingChallenge.Submissions.WebApi/Tsa.CodingChallenge.Submissions.WebApi.csproj \
            --configuration Release \
            --no-build \
            --output ${{ runner.temp }}/Tsa.CodingChallenge.Submissions.WebApi \
            --nologo

      - uses: actions/upload-artifact@v2
        name: Upload Published Blazor Web App
        with:
          name: web-blazor
          path: ${{ runner.temp }}/Tsa.CodingChallenge.Submissions.Blazor
        
      - uses: actions/upload-artifact@v2
        name: Upload Published Web API App
        with:
          name: web-api
          path: ${{ runner.temp }}/Tsa.CodingChallenge.Submissions.WebApi

  # buildDatabase:
  #   name: "Build Database DACPAC"
  #   needs: semver
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: Add msbuild to PATH
  #       uses: microsoft/setup-msbuild@v1.0.2

  #     - name: Build Database DACPAC
  #       run: |
  #         msbuild src\Tsa.CodingChallenge.Submissions.Database\Tsa.CodingChallenge.Submissions.Database.sqlproj `
  #           /t:Build `
  #           /p:configuration=release `
  #           /p:SolutionDir=${{ github.workspace }}\src\
      
  #     # This needs to run in the build step to ensure we've captured
  #     # the Dockerfile and the creation script as this can't run on
  #     # a Linux VM - Microsoft needs to make MSBuild work on Linux
  #     - uses: actions/upload-artifact@v2
  #       name: Upload Docker Artifacts
  #       # DEBUG ONLY - Commented out condition to test workflow
  #       #if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
  #       with:
  #         name: database-docker
  #         path: src/docker/database

  #     - uses: actions/upload-artifact@v2
  #       name: Upload DACPAC Artifact
  #       if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
  #       with:
  #         name: database-dacpac
  #         path: src/*.Database/**/*.dacpac

  # TODO: Only run on master branch  
  buildDockerContainers:
    name: Build Docker Containers
    needs: [semver, buildApplciations]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [blazor, database, webapi]
        include:
          - image: blazor
            downloadArtifacts: false
            dockerContext: src/
            dockerfile: src/Tsa.CodingChallenge.Submissions.Blazor/Dockerfile
          - image: database
            downloadArtifacts: true
            dockerContext: database-docker/
            dockerfile: database-docker/Dockerfile
          - image: webapi
            downloadArtifacts: false
            dockerContext: src/
            dockerfile: src/Tsa.CodingChallenge.Submissions.WebApi/Dockerfile
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        if: ${{ matrix.downloadArtifacts == true }}
        with:
          name: database-docker
          path: database-docker/
          
      - name: Set Execute on Scripts
        if: ${{ matrix.downloadArtifacts == true }}
        run: chmod a+x ./database-docker/scripts/create-sql-database.sh

      - name: Build tsa/coding/submissions/${{ matrix.image }} Image
        run: |
          docker build \
            --tag $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.semVer }} \
            --tag $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.releaseLabel }} \
            --tag $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.majorMinorReleaseLabel }} \
            --tag $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.majorReleaseLabel }} \
            --file ${{ matrix.dockerfile }} \
            ${{ matrix.dockerContext }}

      - name: Azure CLI Login
        uses: azure/login@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          creds: ${{ secrets.AZURE_ACR_CREDENTIALS }}

      - name: Docker Login
        uses: azure/docker-login@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          login-server: ${{ env.DOCKER_REPO }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      
      - name: Push tsa/coding/submissions/${{ matrix.image }} Image
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          docker push $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.semVer }}
          docker push $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.releaseLabel }}
          docker push $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.majorMinorReleaseLabel }}
          docker push $DOCKER_REPO/tsa/coding/submissions/${{ matrix.image }}:${{ needs.semver.outputs.majorReleaseLabel }}
