trigger:
- master
- develop
- feature/*

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  restoreBuildProjects: '**/*.csproj'
  testProjects: '**/*[Tt]ests/*.csproj'

stages:
- stage: BuildApplication
  displayName: 'Build Application'

  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: restore
        projects: '$(restoreBuildProjects)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Sources'
      inputs:
        projects: '$(restoreBuildProjects)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: test
        projects: '$(testProjects)'
        arguments: '--configuration $(buildConfiguration) --filter "TestCategory=UnitTest" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Web Applications'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()